import json
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo, KeyboardButton, ReplyKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import os
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from telegram.ext import CommandHandler
import time
from telegram.ext import CallbackQueryHandler


BOT_TOKEN = "7472767533:AAFDewMWR-lN1BMEPffa0AwjAvffUMUXHyg"
ADMIN_ID = "1799744741"
WEB_APP_URL = "https://botdepoy.github.io/NewTelegrambot/form.html"

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

USER_DB = "users.json"
MESSAGE_DB = "messages.json"

MENU = [
    [KeyboardButton("‚úàÔ∏è ‰∫§ÈÄöÊúçÂä°"), KeyboardButton("üìú ËØÅÁÖßÂäûÁêÜ"), KeyboardButton("üåç ÁøªËØë‰∏éÂïÜÂä°ÂØπÊé•")],
    [KeyboardButton("üèõÔ∏è ‰ºÅ‰∏öËêΩÂú∞ÊîØÊåÅ"), KeyboardButton("üè® ÈÖíÂ∫ó‰∏éÁßüÂá≠"), KeyboardButton("üöÄ ÁªºÂêàÂ¢ûÂÄºÊúçÂä°")],
    [KeyboardButton("üë©‚Äçüíª ‰∫∫Â∑•ÂÆ¢Êúç")]
]

RESPONSE_DATA = {
        "‚úàÔ∏è ‰∫§ÈÄöÊúçÂä°": {
        "photo": "images/Êé•Êú∫.jpg",
        "caption": "üöñ ‰∫§ÈÄöÊúçÂä° | Transportation Services „ÄÅ\n\n"
                    "‚ú® Êèê‰æõ‰∏ì‰∏öÂá∫Ë°åÊñπÊ°àÔºåÂä©ÊÇ®ÁïÖË°åÊó†ÂøßÔºÅ ‚ú®\n"
                    "üöó Êú∫Âú∫Êé•ÈÄÅ ‚Äì ÂáÜÊó∂Êé•ÈÄÅÔºåËΩªÊùæÂá∫Ë°å üõ´\n"
                   " üöò ‰∏ìËΩ¶ÊúçÂä° ‚Äì ÂïÜÂä°Áî®ËΩ¶ / È´òÁ´Ø‰∏ìËΩ¶ / VIPÊé•ÂæÖ üíº\n"
                   " üßë‚Äç‚úàÔ∏è Âè∏Êú∫ÁßüËµÅ ‚Äì ÁªèÈ™å‰∏∞ÂØåÔºåÂÆâÂÖ®ÂèØÈù† üèÜ\n" 
                  "  ‚úÖ ÂÆâÂÖ® | üöÄ È´òÊïà | üíé ËàíÈÄÇ\n\n"
                   " Êó†ËÆ∫ÊòØÂïÜÂä°Âá∫Ë°åËøòÊòØÂ∞ä‰∫´‰∏ìËΩ¶ÔºåÊàë‰ª¨ÈÉΩ‰∏∫ÊÇ®Êèê‰æõÊúÄ‰Ω≥ÊñπÊ°àÔºÅ üåç‚ú®\n",
        "buttons":  [[InlineKeyboardButton("‰∏ìËΩ¶ÊúçÂä°", callback_data="car_service"), InlineKeyboardButton("‚úà Êú∫Âú∫Êé•ÈÄÅ", callback_data="transportation")],
                    [InlineKeyboardButton("üßëüèª‚Äçüíª Âú®Á∫øÂÆ¢Êúç", url="https://t.me/HQBGSKF")]]
        },
         "transportation": {
                "photo": "images/Êé•Êú∫.jpg",  # Change to your image path or URL
                "caption": "üöñ ‰∫§ÈÄöÊúçÂä° | Transportation Services\n\n"
                           "‚ú® Êèê‰æõ‰∏ì‰∏öÂá∫Ë°åÊñπÊ°àÔºåÂä©ÊÇ®ÁïÖË°åÊó†ÂøßÔºÅ ‚ú®\n"
                           "üöó Êú∫Âú∫Êé•ÈÄÅ ‚Äì ÂáÜÊó∂Êé•ÈÄÅÔºåËΩªÊùæÂá∫Ë°å üõ´\n"
                           "üöò ‰∏ìËΩ¶ÊúçÂä° ‚Äì ÂïÜÂä°Áî®ËΩ¶ / È´òÁ´Ø‰∏ìËΩ¶ / VIPÊé•ÂæÖ üíº\n"
                           "üßë‚Äç‚úàÔ∏è Âè∏Êú∫ÁßüËµÅ ‚Äì ÁªèÈ™å‰∏∞ÂØåÔºåÂÆâÂÖ®ÂèØÈù† üèÜ\n"
                           "‚úÖ ÂÆâÂÖ® | üöÄ È´òÊïà | üíé ËàíÈÄÇ\n\n"
                           "Êó†ËÆ∫ÊòØÂïÜÂä°Âá∫Ë°åËøòÊòØÂ∞ä‰∫´‰∏ìËΩ¶ÔºåÊàë‰ª¨ÈÉΩ‰∏∫ÊÇ®Êèê‰æõÊúÄ‰Ω≥ÊñπÊ°àÔºÅ üåç‚ú®",
                "buttons": [
                    [InlineKeyboardButton("üöó ‰∏ìËΩ¶ÊúçÂä°", callback_data="car_service")],
                    [InlineKeyboardButton("‚úà Êé•Êú∫È¢ëÈÅì", callback_data="airport_service")],
                    [InlineKeyboardButton("üîô ËøîÂõû", callback_data="start")]
                ]
            },
            "car_service": {
                "photo": "images/‰∏ìËΩ¶.jpg",
                "caption": "üöó **‰∏ìËΩ¶ÊúçÂä°**\n\n"
                           "üîπ È´òÁ´ØÂïÜÂä°Áî®ËΩ¶ üöò\n"
                           "üîπ VIPÊé•ÂæÖ üèÜ\n"
                           "üîπ ËàíÈÄÇ & ‰æøÊç∑\n"
                           "üíé Â∞ä‰∫´ÊÇ®ÁöÑÂá∫Ë°å‰ΩìÈ™åÔºÅ",
                "buttons": [[InlineKeyboardButton("üîô ËøîÂõû", callback_data="transportation")]]
            }
        
}
# Handle Button Clicks
def button_click(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    query.answer()  # Acknowledge the button press
    send_response(query.message, query.data)

# Function to Send or Update Response
def send_response(message, key):
    if key in RESPONSE_DATA:
        data = RESPONSE_DATA[key]
        keyboard = InlineKeyboardMarkup(data["buttons"])
        
        # Check if editing an existing message or sending a new one
        if message.photo:
            message.edit_media(
                media=InputMediaPhoto(data["photo"], caption=data["caption"]),
                reply_markup=keyboard
            )
        else:
            message.reply_photo(photo=data["photo"], caption=data["caption"], reply_markup=keyboard)
def load_users():
    try:
        with open(USER_DB, "r") as f:
            users = json.load(f)
            # Ensure the loaded data is a dictionary
            if isinstance(users, dict):
                return users
            else:
                return {}  # Return an empty dictionary if the file is corrupted
    except (FileNotFoundError, json.JSONDecodeError):
        return {}  # Return an empty dictionary if the file doesn't exist or is invalid

def save_users(users):
    with open(USER_DB, "w") as f:
        json.dump(users, f)


async def start(update: Update, context: CallbackContext):
    user_id = str(update.message.chat_id)  # Convert to string for consistency
    users = load_users()
    
    # Add the user if they don't exist, or update their last interaction time
    users[user_id] = {"last_interaction": time.time()}
    
    save_users(users)
    menu_markup = ReplyKeyboardMarkup(MENU, resize_keyboard=True)
    await update.message.reply_text("üìå Please select an option:", reply_markup=menu_markup)

async def handle_menu(update: Update, context: CallbackContext):
    user_id = update.message.chat_id
    users = load_users()
    if str(user_id) in users:
        users[str(user_id)]["last_interaction"] = time.time()
    else:
        users[str(user_id)] = {"last_interaction": time.time()}
    save_users(users)
    
    text = update.message.text
    if text in RESPONSE_DATA:
        data = RESPONSE_DATA[text]
        buttons = InlineKeyboardMarkup(data["buttons"])
        await update.message.reply_photo(photo=open(data["photo"], "rb"), caption=data["caption"], reply_markup=buttons)
    else:
        await update.message.reply_text("‚ùå Invalid option. Please select a valid menu item.")


def get_active_users(users, active_threshold=3600):  # active_threshold in seconds (e.g., 1 hour)
    current_time = time.time()
    active_users = [user_id for user_id, user_data in users.items() if current_time - user_data["last_interaction"] <= active_threshold]
    return active_users

async def active_users(update: Update, context: CallbackContext):
    users = load_users()
    active_users = get_active_users(users)
    await update.message.reply_text(f"Active users: {len(active_users)}")

async def contact(update: Update, context: CallbackContext):
    """Handles the /contact command and sends an image with a clickable Telegram link."""
    
    contact_link = "https://t.me/LUODISWKF"  # Replace with your actual Telegram contact link
    image_path = "images/217798948_117810053917589_7233136944671638590_n.png"  # Replace with your actual image path
    text_message = "üìû **ËÅîÁ≥ªÊàë‰ª¨:**\nÁÇπÂáª‰∏ãÊñπÊåâÈíÆËÅîÁ≥ªÂú®Á∫øÂÆ¢Êúç„ÄÇ"

    # Create button
    buttons = [[InlineKeyboardButton("üí¨ ËÅîÁ≥ªÂÆ¢Êúç", url=contact_link)]]

    # Check if the image exists
    if os.path.exists(image_path):
        with open(image_path, "rb") as image_file:
            await update.message.reply_photo(
                photo=image_file,
                caption=text_message,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    else:
        # If the image is missing, send text only
        await update.message.reply_text(
            text=text_message, 
            parse_mode="Markdown", 
            reply_markup=InlineKeyboardMarkup(buttons)
        )


async def broadcast(update: Update, context: CallbackContext):
    text_messages = [
        "üì¢ **Global Announcement!**",
    ]
    images = ["images/image1.jpg", "images/image2.jpg"]  # Add your images here
    buttons = [[InlineKeyboardButton("üîç View Details", url="https://example.com")],
               [InlineKeyboardButton("üìù Fill Form", web_app=WebAppInfo(url=WEB_APP_URL))]]

    users = load_users()
    sent_messages = {}

    for user_id in users:
        sent_messages[user_id] = []
        try:
            # Send multiple text messages
            for text in text_messages:
                message = await context.bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))
                sent_messages[user_id].append(message.message_id)

            # Send images
            media_group = [InputMediaPhoto(open(img, "rb"), caption="üì∑ Check these images!") for img in images]
            photo_messages = await context.bot.send_media_group(user_id, media=media_group)
            sent_messages[user_id].extend([msg.message_id for msg in photo_messages])
        except Exception as e:
            print(f"Failed to send message to {user_id}: {e}")

    with open(MESSAGE_DB, "w") as f:
        json.dump(sent_messages, f)

async def update_broadcast(update: Update, context: CallbackContext):
    new_text_messages = [
        "üì¢ **Updated Announcement!**",
    ]
    buttons = [[InlineKeyboardButton("üîç More Info", url="https://example.com")],
               [InlineKeyboardButton("üìù Fill Form", web_app=WebAppInfo(url=WEB_APP_URL))]]

    try:
        with open(MESSAGE_DB, "r") as f:
            sent_messages = json.load(f)
    except FileNotFoundError:
        return

    for user_id, message_ids in sent_messages.items():
        try:
            # Update text messages
            for i, new_text in enumerate(new_text_messages):
                await context.bot.edit_message_text(chat_id=user_id, message_id=message_ids[i], text=new_text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(buttons))
        except Exception as e:
            print(f"Failed to update message for {user_id}: {e}")

async def delete_broadcast(update: Update, context: CallbackContext):
    try:
        with open(MESSAGE_DB, "r") as f:
            sent_messages = json.load(f)
    except FileNotFoundError:
        return

    for user_id, message_ids in sent_messages.items():
        try:
            for msg_id in message_ids:
                await context.bot.delete_message(chat_id=user_id, message_id=msg_id)
        except Exception as e:
            print(f"Failed to delete message for {user_id}: {e}")

    with open(MESSAGE_DB, "w") as f:
        json.dump({}, f)

def main():
    # Ensure the USER_DB file exists and is initialized
    if not os.path.exists(USER_DB):
        with open(USER_DB, "w") as f:
            json.dump({}, f)  # Initialize with an empty dictionary

    # Ensure the MESSAGE_DB file exists and is initialized
    if not os.path.exists(MESSAGE_DB):
        with open(MESSAGE_DB, "w") as f:
            json.dump({}, f)  # Initialize with an empty dictionary

    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("contact", contact))
    application.add_handler(CommandHandler("broadcast", broadcast))
    application.add_handler(CommandHandler("update_broadcast", update_broadcast))
    application.add_handler(CommandHandler("delete_broadcast", delete_broadcast))
    application.add_handler(CommandHandler("active_users", active_users))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))
    application.run_polling()

if __name__ == "__main__":
    main()
